<?xml version="1.0" encoding="UTF-8"?>

<!-- 'plugin name' equals 'unequivocal plugin id' -->
<plugin name="basic-plugin" title="Pentaho Basic Plugin">

	<!-- ================================ -->
	<!-- Lifecycle Listener 			  -->
	<!-- ================================ -->

	<lifecycle-listener class="pt.webdetails.basic.plugin.BasicPluginLifecycleListener" />
	
	
	<!-- ================================ -->
	<!-- Content Types 					  -->
	<!-- ================================ -->	

	<content-types>

		<!-- ================================ -->
		<!-- Static resources 				  -->
		<!-- ================================ -->

        <static-paths>
        	<!-- this translates to /api/repos/basic-plugin/<LOCAL_FOLDER>/<RESOURCE_FILENAME> -->
            <static-path url="/basic-plugin/resources" localFolder="resources"/>
            <static-path url="/basic-plugin/lang" localFolder="lang"/>
        </static-paths>

		<!-- for now we'll use a file extension that we know the platform is aware of, but later on we'll create our own -->
		<!-- see pentaho-solutions/system/ImportHandlerMimeTypeDefinitions.xml for list of recognized mimeTypes + file extensions -->

        <content-type type="properties" mime-type="text/plain"> <!-- see plugin.spring.xml -->
        	<title>PROPERTIES</title>
	      	<operations>

	      		<!-- a couple basic operation ids: RUN, NEWWINDOW, BACKGROUND, EDIT, SCHEDULE_NEW, .. -->

	      		<operation>
		          	<id>RUN</id> 
		          	<!-- no perspective set: uses default /generatedContent -->
		        </operation>

		        <operation>
					<id>EDIT</id>

					<!-- "perspective" equals "bean-id declared in plugin.spring.xml" 	-->
					<!-- The following lookup logic is used ( by this order ): 			-->
					<!-- (1) <file-extension> + <dot> + <perspective>  					-->
					<!-- (2) <perspective> 												-->
					<perspective>properties.edit</perspective> 
		        </operation>
		    </operations>
    	</content-type>	

    </content-types>

	<!-- ================================ -->
	<!-- External resources 			  -->
	<!-- ================================ -->

    <external-resources>

    	<!-- a couple of contexts: global, mantle, requirejs, analyzer, ...  -->
    	<!-- we'll leverage on our already registered static resource endpoints -->
    	<file context="mantle">api/repos/basic-plugin/resources/basic-plugin-startup.js</file>
  	</external-resources>


	<!-- ================================ -->
	<!-- Overlays			 			  -->
	<!-- ================================ -->

	<overlays>

		<!-- A new option under the 'CREATE NEW' button -->
		<overlay id="launch" resourcebundle="api/repos/basic-plugin/lang/messages">
			<!-- 'launch': id that represents the 'CREATE NEW' button -->
			<button id="btn_new_basic_plugin"
					label="${bp.btn.create.new}"
					command="Home.openFile('${bp.btn.create.new}', '${bp.bnt.create.new.title}', 'plugin/basic-plugin/api/hello');$('#btnCreateNew').popover('hide');"/>
		</overlay>


		<!-- A new option under the 'Tools' menu -->
		<overlay id="startup_tools_bp" resourcebundle="api/repos/basic-plugin/lang/messages">
			<menubar id="toolsmenu">
				<!-- 'toolsmenu': id of the menu under which we'll be adding our item -->
				<menuitem id="tools_bp"
						  label="${bp.tools.menu.item}"
						  command="mantleXulHandler.openUrl('${bp.tools.menu.item}','${bp.tools.menu.item.title}', 'plugin/basic-plugin/api/hello')">
				</menuitem>
			</menubar>
		</overlay>

	</overlays>


</plugin>
